<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>@yield('title', '首页') - {{ config('app.name') }}</title>
    <meta name="description" content="@yield('description', config('app.name'))" />

    <!-- Styles -->
    <link href="{{ mix('css/forum.css') }}" rel="stylesheet">
    @yield('style')
</head>
<body>
<div id="app" class="{{ route_class() }}-page">
    <div class="flash-message text-center">
        <p class="alert alert-warning">
            `Laravel`版`小丑路人社区`改版中，与`<a href="https://bbs.cnpscy.com" target="_blank">Hyperf版小丑路人社区</a>`数据互动，此版本改版中……尚未彻底完结！
        </p>
    </div>

    @include('forum::layouts._header')

    <div class="container">

        @include('forum::shared._messages')

        @yield('content')

    </div>

    @include('forum::layouts._footer')
</div>

@if (app()->isLocal())
    <!-- 切换登录会员工具 -->
    @includeIf('sudosu::user-selector')
@endif

<!-- Scripts -->
<script src="{{ mix('js/forum.js') }}"></script>
<script>
    <!-- 登录Token -->
    const user_token = @json(session('login_token'));

    const instance = axios.create({
        baseURL: '/api',
        timeout: 10000,
        headers: {
            'Authorization': user_token ? 'Bearer ' + user_token : ''
        }
    });

    // 定义element
    const Element = window.elementUI;

    axios_interceptors(instance);

    function axios_interceptors(http){
        // 请求拦截
        http.interceptors.request.use(
            config => {
                // config.withCredentials = true // 需要跨域打开此配置
                return config
            },
            error => {
                return Promise.reject(error);
            }
        )
        // https://github.com/mzabriskie/axios#interceptors
        http.interceptors.response.use(
            response => {
                let data = response.data;
                if (data.status == 0) {
                    // 是否拦截
                    if (data.no_interceptor) {
                        return data;
                    }else{
                        if (data.msg) {
                            Element.Message.error(data.msg);
                        }
                        return Promise.reject(data.msg);
                    }
                } else {
                    if (data.status == -1) {
                        store.dispatch('setToken', null);
                        store.dispatch('setUser', {});
                        Element.Message.error(data.msg);
                    }
                    // 如果服务端返回新的Token，那么自动存储于data，避免更改现有返回结果
                    if (response.headers.authorization) {
                        // data.authorization = response.headers.authorization;
                        store.dispatch('setToken', response.headers.authorization);
                    }
                    return data;
                }
            },
            /**
             * This is a central point to handle all
             * error messages generated by HTTP
             * requests
             */
            error => {
                if (!error['response']) {
                    return Promise.reject(error);
                }
                switch (error.response.status) {
                    case -1:
                    case 0:
                    case 422:
                        let data = error.response.data.errors;
                        let content = '';

                        Object.keys(data).map(function (key) {
                            let value = data[key]

                            content = value[0]
                        })

                        Element.Message.error(content);
                        break
                    case 403:
                        Element.Message.error(error.response.data.msg || '您没有此操作权限！');
                        break
                    case 400:
                        Element.Message.error(error.response.data.msg);
                        break
                    case 401:
                        Element.Message.error(error.response.data.msg || 'UNAUTHORIZED！');
                        let path = window.location.pathname;
                        // 401，首页也无需跳转
                        var login_path = "{{ route('login') }}";
                        if (path !== '/' && path !== login_path) {
                            window.location.href = login_path;
                        }
                        break;
                    case 500:
                    case 501:
                    case 503:
                    default:
                        Element.Message.error(error.response.data.msg || '服务器出了点小问题，程序员小哥哥要被扣工资了~！');
                }
                return Promise.reject(error.response);
            }
        )
    }
</script>

@yield('script')

@include('forum::layouts._back_page_top')

</body>
</html>
